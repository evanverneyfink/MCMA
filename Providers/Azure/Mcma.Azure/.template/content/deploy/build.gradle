task setVars {
    project.ext.set("config", project.hasProperty("config") ? config : "Release")
}

task dotNetClean(type: Exec) {
    commandLine "cmd", "/c", "dotnet"
    args "clean", "..", "-c=${project.config}"
}
dotNetClean.dependsOn(setVars);

task dotNetBuild(type: Exec) {
    commandLine "cmd", "/c", "dotnet"
    args "build", "..", "-c=${project.config}"

    ext.version = new Date().format("yyyyMMddHHmmss")
}
//dotNetBuild.dependsOn(initFunction);
dotNetBuild.dependsOn(dotNetClean);

task zipOutput(type: Zip) {
    from "..\\bin\\${project.config}\\netstandard2.0"
    destinationDir = file("..\\bin\\${project.config}\\FunctionPackages")
    archiveName = "function_" + dotNetBuild.ext.version + ".zip"

    ext.archiveTerraformPath = "../../bin/${project.config}/FunctionPackages/" + zipOutput.archiveName;
}
zipOutput.dependsOn(dotNetBuild);

task setZipFunctionVar {
    File zipVarFile = new File("terraform\\zip-file.tfvars");
    zipVarFile.setText("restApiZipFile = \"" + zipOutput.ext.archiveTerraformPath + "\"");
}
setZipFunctionVar.dependsOn(zipOutput);

task terraformInit(type: Exec) {
    commandLine "cmd", "/c", "terraform"
    args "init", "-input=false", "-backend-config=s3.backend"
    workingDir "terraform"
}

task terraformApply(type: Exec) {
    commandLine "cmd", "/c", "terraform"
    args "apply", "-auto-approve", "-var-file=\"private.tfvars\"", "-var-file=\"public.tfvars\"", "-var-file=\"zip-file.tfvars\""
    workingDir "terraform"
}
terraformApply.dependsOn(terraformInit);

task runLocalAzureFuncRuntime(type: Exec) {
    commandLine "cmd", "/c", "func"
    args "start"
    workingDir "..\\bin\\${project.config}\\netstandard2.0"
}
runLocalAzureFuncRuntime.dependsOn(dotNetBuild);

task build {}
build.dependsOn(dotNetBuild);

task pack {}
pack.dependsOn(setZipFunctionVar);

task deploy {}
deploy.dependsOn(terraformApply);

task packageAndDeploy{}
packageAndDeploy.dependsOn(pack);
packageAndDeploy.finalizedBy(deploy);

task debug {}
debug.dependsOn(runLocalAzureFuncRuntime);
